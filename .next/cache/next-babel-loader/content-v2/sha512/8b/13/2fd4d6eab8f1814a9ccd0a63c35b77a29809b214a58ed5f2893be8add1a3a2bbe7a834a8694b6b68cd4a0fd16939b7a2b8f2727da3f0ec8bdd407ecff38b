{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tanyaprabhakar/Chat/mychat/pages/index.js\";\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport UsernameField from \"../components/UsernameField\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart'; // import { Editor } from \"@tinymce/tinymce-react\";\n\nexport default function Home() {\n  // save the socket\n  const {\n    0: socket,\n    1: setSocket\n  } = useState(null); // Whether the username is set.\n\n  const {\n    0: isUsernameConfirmed,\n    1: setUsernameConfirmed\n  } = useState(false); // State for the username.\n\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\"); // State for the form field.\n\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\"); // State for message history.\n\n  const {\n    0: history,\n    1: setHistory\n  } = useState([\n    /*\n    {\n      username: \"Santa Claus\",\n      message: \"Ho ho ho!\"\n    }\n    */\n  ]);\n\n  const connectSocket = () => {\n    // prime the server first. yes, this is an extra call and is inefficient.\n    // but we're using NextJS for convenience, so this is a necessary evil.\n    fetch(\"/api/chat\"); // after making sure that socket server is primed, connect to it.\n\n    if (!socket) {\n      const newSocket = io(); // Confirms connection\n\n      newSocket.on(\"connect\", () => {\n        console.log(\"Chat app connected\");\n      }); // handles message\n\n      newSocket.on(\"message\", msg => {\n        setHistory(history => [...history, msg]);\n      }); // Logs when server disconnects\n\n      newSocket.on(\"disconnect\", () => {\n        console.warn(\"WARNING: chat app disconnected\");\n      });\n      setSocket(() => newSocket);\n    }\n  }; // The websocket code\n\n\n  useEffect(() => {\n    connectSocket();\n  }, []); // this method submits the form and sends the message to the server.\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (!socket) {\n      alert(\"Chatroom not connected yet. Try again in a little bit.\");\n      return;\n    } // prevent empty submissions\n\n\n    if (!message || !isUsernameConfirmed) {\n      return;\n    } // submit and blank-out the field.\n\n\n    socket.emit(\"message-submitted\", {\n      message,\n      username\n    });\n    setMessage(\"\");\n  }; // handleChange(content, editor); {\n  //   this.setState({content});\n  // }\n  //  const websocket=require(\"ws\") \n  //   const rooms = {};\n  //   ws.on(\"connection\", socket => {\n  //     const uuid = uuid // create here a uuid for this connection\n  //     const leave = room => {\n  //       // not present: do nothing\n  //       if(! rooms[room][uuid]) return;\n  //       // if the one exiting is the last one, destroy the room\n  //       if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n  //       // otherwise simply leave the room\n  //       else delete rooms[room][uuid];\n  //     };\n  //     socket.on(\"message\", data => {\n  //       const { message, meta, room } = data;\n  //       if(meta === \"join\") {\n  //         if(! rooms[room]) rooms[room] = {}; // create the room\n  //         if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n  //       }\n  //       else if(meta === \"leave\") {\n  //         leave(room);\n  //       }\n  //       else if(! meta) {\n  //         // send the message to all in the room\n  //         Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n  //       }\n  //     });\n  //     socket.on(\"close\", () => {\n  //       // for each room, remove the closed socket\n  //       Object.keys(rooms).forEach(room => leave(room));\n  //     });\n  //   });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat_window,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"chit-chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"embed\", {\n      src: \"https://www.youtube.com/watch?v=32oQrjSCUTw&t=4s\",\n      loop: \"true\",\n      autostart: \"true\",\n      width: \"2\",\n      height: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.top_menu,\n      className: styles.text,\n      children: \" Game of thrones \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.alignment,\n      children: /*#__PURE__*/_jsxDEV(UsernameField, {\n        className: styles.second_bar,\n        completed: isUsernameConfirmed,\n        value: username,\n        onChange: value => setUsername(value),\n        onSubmit: () => setUsernameConfirmed(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.message_container,\n      children: history.map(({\n        username,\n        message\n      }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.chatbox,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 16\n          }, this), \": \", message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.alignment,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.bottom_wrapper.message_input_wrapper,\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: styles.bottom_wrapper,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                className: styles.message_input,\n                id: \"textarea\",\n                type: \"text\",\n                name: \"message\",\n                value: message,\n                onChange: e => setMessage(e.target.value),\n                placeholder: username ? \"Enter your message...\" : \"Set username...\",\n                disabled: !isUsernameConfirmed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: styles.submit,\n              type: \"submit\",\n              value: \"Submit\",\n              disabled: !isUsernameConfirmed\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 4\n  }, this);\n}","map":{"version":3,"sources":["/Users/tanyaprabhakar/Chat/mychat/pages/index.js"],"names":["Head","styles","useEffect","useState","io","UsernameField","Picker","Home","socket","setSocket","isUsernameConfirmed","setUsernameConfirmed","username","setUsername","message","setMessage","history","setHistory","connectSocket","fetch","newSocket","on","console","log","msg","warn","handleSubmit","evt","preventDefault","alert","emit","chat_window","top_menu","text","alignment","second_bar","value","message_container","map","i","chatbox","bottom_wrapper","message_input_wrapper","message_input","e","target","submit"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport styles from '../styles/Home.module.css'\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport UsernameField from \"../components/UsernameField\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\n// import { Editor } from \"@tinymce/tinymce-react\";\n\n\n\n\n\n  \nexport default function Home() {\n  // save the socket\n  const [socket, setSocket] = useState(null);\n\n  // Whether the username is set.\n  const [isUsernameConfirmed, setUsernameConfirmed] = useState(false);\n\n  // State for the username.\n  const [username, setUsername] = useState(\"\");\n\n  // State for the form field.\n  const [message, setMessage] = useState(\"\");\n\n  // State for message history.\n  const [history, setHistory] = useState([\n    /*\n    {\n      username: \"Santa Claus\",\n      message: \"Ho ho ho!\"\n    }\n    */\n  ]);\n\n  const connectSocket = () => {\n    // prime the server first. yes, this is an extra call and is inefficient.\n    // but we're using NextJS for convenience, so this is a necessary evil.\n    fetch(\"/api/chat\");\n    // after making sure that socket server is primed, connect to it.\n\n    if (!socket) {\n      const newSocket = io();\n\n      // Confirms connection\n      newSocket.on(\"connect\", () => {\n        console.log(\"Chat app connected\");\n      });\n\n      // handles message\n      newSocket.on(\"message\", (msg) => {\n        setHistory((history) => [...history, msg]);\n      });\n\n      // Logs when server disconnects\n      newSocket.on(\"disconnect\", () => {\n        console.warn(\"WARNING: chat app disconnected\");\n      });\n\n      setSocket(() => newSocket);\n    }\n  };\n\n  // The websocket code\n  useEffect(() => {\n    connectSocket();\n  }, []);\n\n  // this method submits the form and sends the message to the server.\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    if (!socket) {\n      alert(\"Chatroom not connected yet. Try again in a little bit.\");\n      return;\n    }\n\n    // prevent empty submissions\n    if (!message || !isUsernameConfirmed) {\n      return;\n    }\n\n    // submit and blank-out the field.\n    socket.emit(\"message-submitted\", { message, username });\n    setMessage(\"\");\n  };\n\n\n  // handleChange(content, editor); {\n  //   this.setState({content});\n  // }\n//  const websocket=require(\"ws\") \n//   const rooms = {};\n\n//   ws.on(\"connection\", socket => {\n//     const uuid = uuid // create here a uuid for this connection\n  \n//     const leave = room => {\n//       // not present: do nothing\n//       if(! rooms[room][uuid]) return;\n  \n//       // if the one exiting is the last one, destroy the room\n//       if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n//       // otherwise simply leave the room\n//       else delete rooms[room][uuid];\n//     };\n  \n//     socket.on(\"message\", data => {\n//       const { message, meta, room } = data;\n  \n//       if(meta === \"join\") {\n//         if(! rooms[room]) rooms[room] = {}; // create the room\n//         if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n//       }\n//       else if(meta === \"leave\") {\n//         leave(room);\n//       }\n//       else if(! meta) {\n//         // send the message to all in the room\n//         Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n//       }\n//     });\n  \n//     socket.on(\"close\", () => {\n//       // for each room, remove the closed socket\n//       Object.keys(rooms).forEach(room => leave(room));\n//     });\n//   });\n\n\n\n\n  return (\n\n\n\n    \n  \n    \n    \n    \n\n  \n    \n   <div className={styles.chat_window}>\n      <Head>\n      \n        <title >chit-chat</title>\n    \n\n      </Head>\n\n      \n      <embed src=\"https://www.youtube.com/watch?v=32oQrjSCUTw&t=4s\" loop=\"true\" autostart=\"true\" width=\"2\" height=\"0\"></embed>\n      \n      \n      <h1 className={styles.top_menu}className={styles.text}> Game of thrones </h1>\n\n      <div className={styles.alignment} >\n      <UsernameField className={styles.second_bar}\n        completed={isUsernameConfirmed}\n        value={username}\n        onChange={(value) => setUsername(value)}\n        onSubmit={() => setUsernameConfirmed(true)}\n      /></div>\n{/*   <ul class=\"messages\"></ul>\n    <div class=\"bottom_wrapper clearfix\">*/}\n\n      <div  className={styles.message_container}>\n        {history.map(({ username, message }, i)  => (\n          <div className={styles.chatbox} key={i}> \n            <p> </p>\n            <p><b>{username}</b>: {message}\n            </p></div>\n        ))}\n        </div>\n      \n        <div className={styles.alignment}>\n        <div className={styles.bottom_wrapper .message_input_wrapper}>\n          <main className={styles.bottom_wrapper}>\n          \n          \n          \n          \n          <form  onSubmit={handleSubmit} >\n          {/* <Editor\n      value={this.useState.content}\n      init={{\n      height: 500,\n      menubar: false\n    }}\n      onEditorChange={this.handleChange}\n      />\n    <br />\n           */}\n      \n    \n          <label >\n            \n            <input className={styles.message_input}\n              id=\"textarea\"\n              type=\"text\"\n              name=\"message\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder={\n                username ? \"Enter your message...\" : \"Set username...\"\n              }\n              disabled={!isUsernameConfirmed}\n            />\n          </label>\n          <input className={styles.submit}type=\"submit\" value=\"Submit\" disabled={!isUsernameConfirmed} />\n        </form></main>\n        </div></div>\n\n\n      \n      {/* <footer className={styles.footera}>\n        \n      </footer> */}\n    </div>\n  )}\n"]},"metadata":{},"sourceType":"module"}