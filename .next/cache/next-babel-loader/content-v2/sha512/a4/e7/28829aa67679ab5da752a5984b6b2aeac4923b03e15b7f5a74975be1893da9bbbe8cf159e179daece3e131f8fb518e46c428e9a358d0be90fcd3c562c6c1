{"ast":null,"code":"import _defineProperty from \"/Users/tanyaprabhakar/Chat/mychat/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/tanyaprabhakar/Chat/mychat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/tanyaprabhakar/Chat/mychat/pages/index.js\",\n    _s = $RefreshSig$();\n\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport UsernameField from \"../components/UsernameField\";\nimport Link from 'next/link';\nexport default function Home() {\n  _s();\n\n  var _jsxDEV2,\n      _this = this;\n\n  // save the socket\n  var _useState = useState(null),\n      socket = _useState[0],\n      setSocket = _useState[1]; // Whether the username is set.\n\n\n  var _useState2 = useState(false),\n      isUsernameConfirmed = _useState2[0],\n      setUsernameConfirmed = _useState2[1]; // State for the username.\n\n\n  var _useState3 = useState(\"\"),\n      username = _useState3[0],\n      setUsername = _useState3[1]; // State for the form field.\n\n\n  var _useState4 = useState(\"\"),\n      message = _useState4[0],\n      setMessage = _useState4[1]; // State for message history.\n\n\n  var _useState5 = useState([\n    /*\n    {\n      username: \"Santa Claus\",\n      message: \"Ho ho ho!\"\n    }\n    */\n  ]),\n      history = _useState5[0],\n      setHistory = _useState5[1];\n\n  var connectSocket = function connectSocket() {\n    // prime the server first. yes, this is an extra call and is inefficient.\n    // but we're using NextJS for convenience, so this is a necessary evil.\n    fetch(\"/api/chat\"); // after making sure that socket server is primed, connect to it.\n\n    if (!socket) {\n      var newSocket = io(); // Confirms connection\n\n      newSocket.on(\"connect\", function () {\n        console.log(\"Chat app connected\");\n      }); // handles message\n\n      newSocket.on(\"message\", function (msg) {\n        setHistory(function (history) {\n          return [].concat(_toConsumableArray(history), [msg]);\n        });\n      }); // Logs when server disconnects\n\n      newSocket.on(\"disconnect\", function () {\n        console.warn(\"WARNING: chat app disconnected\");\n      });\n      setSocket(function () {\n        return newSocket;\n      });\n    }\n  }; // The websocket code\n\n\n  useEffect(function () {\n    connectSocket();\n  }, []); // this method submits the form and sends the message to the server.\n\n  var handleSubmit = function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!socket) {\n      alert(\"Chatroom not connected yet. Try again in a little bit.\");\n      return;\n    } // prevent empty submissions\n\n\n    if (!message || !isUsernameConfirmed) {\n      return;\n    } // submit and blank-out the field.\n\n\n    socket.emit(\"message-submitted\", {\n      message: message,\n      username: username\n    });\n    setMessage(\"\");\n  }; //  const websocket=require(\"ws\") \n  //   const rooms = {};\n  //   ws.on(\"connection\", socket => {\n  //     const uuid = uuid // create here a uuid for this connection\n  //     const leave = room => {\n  //       // not present: do nothing\n  //       if(! rooms[room][uuid]) return;\n  //       // if the one exiting is the last one, destroy the room\n  //       if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n  //       // otherwise simply leave the room\n  //       else delete rooms[room][uuid];\n  //     };\n  //     socket.on(\"message\", data => {\n  //       const { message, meta, room } = data;\n  //       if(meta === \"join\") {\n  //         if(! rooms[room]) rooms[room] = {}; // create the room\n  //         if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n  //       }\n  //       else if(meta === \"leave\") {\n  //         leave(room);\n  //       }\n  //       else if(! meta) {\n  //         // send the message to all in the room\n  //         Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n  //       }\n  //     });\n  //     socket.on(\"close\", () => {\n  //       // for each room, remove the closed socket\n  //       Object.keys(rooms).forEach(room => leave(room));\n  //     });\n  //   });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat_window,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"chit-chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"embed\", {\n      src: \"https://www.youtube.com/watch?v=32oQrjSCUTw&t=4s\",\n      loop: \"true\",\n      autostart: \"true\",\n      width: \"2\",\n      height: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", (_jsxDEV2 = {\n      className: styles.top_menu\n    }, _defineProperty(_jsxDEV2, \"className\", styles.text), _defineProperty(_jsxDEV2, \"children\", \" Game of thrones \"), _jsxDEV2), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.alignment,\n      children: /*#__PURE__*/_jsxDEV(UsernameField, {\n        className: styles.second_bar,\n        completed: isUsernameConfirmed,\n        value: username,\n        onChange: function onChange(value) {\n          return setUsername(value);\n        },\n        onSubmit: function onSubmit() {\n          return setUsernameConfirmed(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.message_container,\n      children: history.map(function (_ref, i) {\n        var username = _ref.username,\n            message = _ref.message;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.chatbox,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 16\n            }, _this), \": \", message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, _this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.alignment,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.bottom_wrapper.message_input_wrapper,\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: styles.bottom_wrapper,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                className: styles.message_input,\n                type: \"text\",\n                name: \"message\",\n                value: message,\n                onChange: function onChange(e) {\n                  return setMessage(e.target.value);\n                },\n                placeholder: username ? \"Enter your message...\" : \"Set username...\",\n                disabled: !isUsernameConfirmed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: styles.submit,\n              type: \"submit\",\n              value: \"Submit\",\n              disabled: !isUsernameConfirmed\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 4\n  }, this);\n}\n\n_s(Home, \"WH6vxuhB+LKBaPhqEAqsRyTxr4c=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tanyaprabhakar/Chat/mychat/pages/index.js"],"names":["Head","styles","useEffect","useState","io","UsernameField","Link","Home","socket","setSocket","isUsernameConfirmed","setUsernameConfirmed","username","setUsername","message","setMessage","history","setHistory","connectSocket","fetch","newSocket","on","console","log","msg","warn","handleSubmit","evt","preventDefault","alert","emit","chat_window","top_menu","text","alignment","second_bar","value","message_container","map","i","chatbox","bottom_wrapper","message_input_wrapper","message_input","e","target","submit"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport styles from '../styles/Home.module.css'\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport UsernameField from \"../components/UsernameField\";\nimport Link from 'next/link';\n\n\n\n\n  \nexport default function Home() {\n  // save the socket\n  const [socket, setSocket] = useState(null);\n\n  // Whether the username is set.\n  const [isUsernameConfirmed, setUsernameConfirmed] = useState(false);\n\n  // State for the username.\n  const [username, setUsername] = useState(\"\");\n\n  // State for the form field.\n  const [message, setMessage] = useState(\"\");\n\n  // State for message history.\n  const [history, setHistory] = useState([\n    /*\n    {\n      username: \"Santa Claus\",\n      message: \"Ho ho ho!\"\n    }\n    */\n  ]);\n\n  const connectSocket = () => {\n    // prime the server first. yes, this is an extra call and is inefficient.\n    // but we're using NextJS for convenience, so this is a necessary evil.\n    fetch(\"/api/chat\");\n    // after making sure that socket server is primed, connect to it.\n\n    if (!socket) {\n      const newSocket = io();\n\n      // Confirms connection\n      newSocket.on(\"connect\", () => {\n        console.log(\"Chat app connected\");\n      });\n\n      // handles message\n      newSocket.on(\"message\", (msg) => {\n        setHistory((history) => [...history, msg]);\n      });\n\n      // Logs when server disconnects\n      newSocket.on(\"disconnect\", () => {\n        console.warn(\"WARNING: chat app disconnected\");\n      });\n\n      setSocket(() => newSocket);\n    }\n  };\n\n  // The websocket code\n  useEffect(() => {\n    connectSocket();\n  }, []);\n\n  // this method submits the form and sends the message to the server.\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    if (!socket) {\n      alert(\"Chatroom not connected yet. Try again in a little bit.\");\n      return;\n    }\n\n    // prevent empty submissions\n    if (!message || !isUsernameConfirmed) {\n      return;\n    }\n\n    // submit and blank-out the field.\n    socket.emit(\"message-submitted\", { message, username });\n    setMessage(\"\");\n  };\n//  const websocket=require(\"ws\") \n//   const rooms = {};\n\n//   ws.on(\"connection\", socket => {\n//     const uuid = uuid // create here a uuid for this connection\n  \n//     const leave = room => {\n//       // not present: do nothing\n//       if(! rooms[room][uuid]) return;\n  \n//       // if the one exiting is the last one, destroy the room\n//       if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n//       // otherwise simply leave the room\n//       else delete rooms[room][uuid];\n//     };\n  \n//     socket.on(\"message\", data => {\n//       const { message, meta, room } = data;\n  \n//       if(meta === \"join\") {\n//         if(! rooms[room]) rooms[room] = {}; // create the room\n//         if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n//       }\n//       else if(meta === \"leave\") {\n//         leave(room);\n//       }\n//       else if(! meta) {\n//         // send the message to all in the room\n//         Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n//       }\n//     });\n  \n//     socket.on(\"close\", () => {\n//       // for each room, remove the closed socket\n//       Object.keys(rooms).forEach(room => leave(room));\n//     });\n//   });\n\n\n\n\n  return (\n\n\n\n    \n  \n    \n    \n    \n\n  \n    \n   <div className={styles.chat_window}>\n      <Head>\n        <title >chit-chat</title>\n        \n      </Head>\n\n      <Link href=\"/profile\">\n      \n    </Link>\n      <embed src=\"https://www.youtube.com/watch?v=32oQrjSCUTw&t=4s\" loop=\"true\" autostart=\"true\" width=\"2\" height=\"0\"></embed>\n      \n      \n      <h1 className={styles.top_menu}className={styles.text}> Game of thrones </h1>\n\n      <div className={styles.alignment} >\n      <UsernameField className={styles.second_bar}\n        completed={isUsernameConfirmed}\n        value={username}\n        onChange={(value) => setUsername(value)}\n        onSubmit={() => setUsernameConfirmed(true)}\n      /></div>\n{/*   <ul class=\"messages\"></ul>\n    <div class=\"bottom_wrapper clearfix\">*/}\n\n      <div  className={styles.message_container}>\n        {history.map(({ username, message }, i)  => (\n          <div className={styles.chatbox} key={i}> \n            <p> </p>\n            <p><b>{username}</b>: {message}\n            </p></div>\n        ))}\n        </div>\n      \n        <div className={styles.alignment}>\n        <div className={styles.bottom_wrapper .message_input_wrapper}>\n          <main className={styles.bottom_wrapper}>\n          \n          <form  onSubmit={handleSubmit}>\n          <label >\n            \n            <input className={styles.message_input}\n              type=\"text\"\n              name=\"message\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder={\n                username ? \"Enter your message...\" : \"Set username...\"\n              }\n              disabled={!isUsernameConfirmed}\n            />\n          </label>\n          <input className={styles.submit}type=\"submit\" value=\"Submit\" disabled={!isUsernameConfirmed} />\n        </form></main>\n        </div></div>\n\n\n      \n      {/* <footer className={styles.footera}>\n        \n      </footer> */}\n    </div>\n  )}\n"]},"metadata":{},"sourceType":"module"}